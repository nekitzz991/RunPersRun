using UnityEngine;
using System.Collections.Generic;
using System;

public class AchievementManager : MonoBehaviour
{
    public static AchievementManager Instance { get; private set; }

    [Header("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")]
    public List<AchievementData> achievementDataList; // –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –∞—Å—Å–µ—Ç–∞–º–∏ AchievementData

    public static event Action<AchievementData> OnAchievementUnlocked; // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ

    private class AchievementState
    {
        public AchievementData data;
        public float progress;
        public bool unlocked;

        public AchievementState(AchievementData data)
        {
            this.data = data;
            progress = PlayerPrefs.GetFloat("AchievementProgress_" + data.id, 0); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            unlocked = PlayerPrefs.GetInt("Achievement_" + data.id, 0) == 1;
        }
    }

    private Dictionary<string, AchievementState> achievementStates;

    private void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }
        Instance = this;
        DontDestroyOnLoad(gameObject); // –°–æ—Ö—Ä–∞–Ω—è–µ–º AchievementManager –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏

        achievementStates = new Dictionary<string, AchievementState>();
        foreach (AchievementData data in achievementDataList)
        {
            achievementStates[data.id] = new AchievementState(data);
        }
    }

    private void OnEnable()
    {
        OnAchievementUnlocked += HandleAchievementUnlocked;
    }

    private void OnDisable()
    {
        OnAchievementUnlocked -= HandleAchievementUnlocked;
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å UI).
    /// </summary>
    private void HandleAchievementUnlocked(AchievementData data)
    {
        Debug.Log($"üèÜ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {data.achievementName}");
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.
    /// </summary>
    public void UpdateAchievement(string id, float progress)
    {
        if (achievementStates.TryGetValue(id, out AchievementState state) && !state.unlocked)
        {
            state.progress = progress;
            PlayerPrefs.SetFloat("AchievementProgress_" + id, progress); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            PlayerPrefs.Save();

            if (state.progress >= state.data.threshold)
            {
                UnlockAchievement(state);
            }
        }
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
    /// </summary>
    public void AddProgress(string id, float amount)
    {
        if (achievementStates.TryGetValue(id, out AchievementState state) && !state.unlocked)
        {
            state.progress += amount;
            PlayerPrefs.SetFloat("AchievementProgress_" + id, state.progress); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            PlayerPrefs.Save();

            if (state.progress >= state.data.threshold)
            {
                UnlockAchievement(state);
            }
        }
    }

    private void UnlockAchievement(AchievementState state)
    {
        state.unlocked = true;
        PlayerPrefs.SetInt("Achievement_" + state.data.id, 1);
        PlayerPrefs.Save();

        Debug.Log($"üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {state.data.achievementName}");

        // –í—ã–∑–æ–≤ UnityEvent –∏–∑ ScriptableObject
        if (state.data.onUnlocked != null)
        {
            state.data.onUnlocked.Invoke();
            Debug.Log($"‚úÖ –í—ã–∑–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ onUnlocked –¥–ª—è: {state.data.achievementName}");
        }
        else
        {
            Debug.LogWarning($"‚ö† –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {state.data.achievementName} –Ω–µ –∏–º–µ–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ onUnlocked.");
        }

        // –í—ã–∑–æ–≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        OnAchievementUnlocked?.Invoke(state.data);
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ.
    /// </summary>
    public bool IsAchievementUnlocked(string id)
    {
        return achievementStates.TryGetValue(id, out AchievementState state) && state.unlocked;
    }
}
