using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class AchievementsManager : MonoBehaviour
{
    // ========= –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –¢–ï–ö–£–©–£–Æ –ò–ì–†–£ =========
    [Header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã")]
    [Tooltip("–ü—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤ –º–µ—Ç—Ä–∞—Ö) –∑–∞ –∏–≥—Ä—É")]
    public int currentDistance;
    [Tooltip("–ù–∞–±—Ä–∞–Ω–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –∏–≥—Ä—É")]
    public int currentScore;
    [Tooltip("–°–æ–±—Ä–∞–Ω–æ –∫–æ—Å—Ç–µ–π –∑–∞ –∏–≥—Ä—É")]
    public int currentBones;
    [Tooltip("–°–æ–±—Ä–∞–Ω–æ –∑–æ–ª–æ—Ç—ã—Ö –∫–æ—Å—Ç–µ–π –∑–∞ –∏–≥—Ä—É")]
    public int currentGoldenBones;
    [Tooltip("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ '–∫–∞–∫–∞—à–µ–∫', –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—É–ø–∏–ª –∏–≥—Ä–æ–∫ –∑–∞ –∏–≥—Ä—É")]
    public int currentPoops;

    // ========= –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –û–ë–©–ò–ô –ü–†–û–ì–†–ï–°–° =========
    [Header("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è)")]
    [Tooltip("–û–±—â–µ–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤ –º–µ—Ç—Ä–∞—Ö)")]
    public int totalDistance;
    [Tooltip("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤")]
    public int totalScore;
    [Tooltip("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Å—Ç–µ–π")]
    public int totalBones;
    [Tooltip("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∑–æ–ª–æ—Ç—ã—Ö –∫–æ—Å—Ç–µ–π")]
    public int totalGoldenBones;
    [Tooltip("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '–∫–∞–∫–∞—à–µ–∫', –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—É–ø–∏–ª –∏–≥—Ä–æ–∫")]
    public int totalPoops;

    // ========= –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π =========
    [Header("UI –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")]
    [Tooltip("–¢–µ–∫—Å—Ç-—Å—á—ë—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, ( 3 / 22 ))")]
    [SerializeField] private Text counterText;
    [Tooltip("–¢–µ–∫—Å—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 45.5% COMPLETE)")]
    [SerializeField] private Text percentualProgressText;
    [Tooltip("–°–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ä–æ–≤ (–∏–∫–æ–Ω–æ–∫) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")]
    [SerializeField] private List<GameObject> markers = new List<GameObject>();

    // ========= –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π =========
    [Header("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")]
    [Tooltip("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")]
    public int achievCount;
    [Tooltip("–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")]
    public float percentualProgress;

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–¥–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)
    public List<bool> isAchieved = new List<bool>();
    public List<int> isAchievedValue = new List<int>();

    // ========= –ê—É–¥–∏–æ =========
    [Header("–ê—É–¥–∏–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")]
    [Tooltip("–ê—É–¥–∏–æ–∫–ª–∏–ø, –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")]
    [SerializeField] private AudioClip achievementSound;
    [Tooltip("–ì—Ä–æ–º–∫–æ—Å—Ç—å –∑–≤—É–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")]
    [SerializeField] private float achievementSoundVolume = 1f;

    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–∏–∑ —É—Å–ª–æ–≤–∏—è ‚Äì 22)
    private int totalAchievements = 22;
    // –ü—Ä–∏–±–∞–≤–∫–∞ –∫ –ø—Ä–æ—Ü–µ–Ω—Ç—É –∑–∞ –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (100 / 22)
    private float progressIncrement;

    private void Start()
    {
        progressIncrement = 100f / totalAchievements;

        // –ï—Å–ª–∏ —Å–ø–∏—Å–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ‚Äì –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        for (int i = isAchieved.Count; i < totalAchievements; i++)
        {
            isAchieved.Add(false);
            isAchievedValue.Add(0);
        }

        LoadPlayerPrefs();
    }

    private void Update()
    {
        CheckCurrentGameAchievements();
        CheckOverallAchievements();
        UpdateMarkers();
        UpdateProgressUI();
        SavePlayerPrefs();
    }

    #region –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã (–∏–Ω–¥–µ–∫—Å—ã 0‚Äì10).
    /// </summary>
    private void CheckCurrentGameAchievements()
    {
        // --- –î–∏—Å—Ç–∞–Ω—Ü–∏—è ---
        // 0. üèÉ‚Äç‚ôÇÔ∏è "–ü–µ—Ä–≤—ã–π —Ä—ã–≤–æ–∫" ‚Äì –ø—Ä–æ–±–µ–∂–∞—Ç—å 100 –º.
        if (currentDistance >= 100 && !isAchieved[0])
            UnlockAchievement(0);
        // 1. üî• "–°–ø—Ä–∏–Ω—Ç–µ—Ä" ‚Äì –ø—Ä–æ–±–µ–∂–∞—Ç—å 1000 –º.
        if (currentDistance >= 1000 && !isAchieved[1])
            UnlockAchievement(1);
        // 2. üåç "–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü" ‚Äì –ø—Ä–æ–±–µ–∂–∞—Ç—å 5000 –º.
        if (currentDistance >= 5000 && !isAchieved[2])
            UnlockAchievement(2);

        // --- –°—á—ë—Ç ---
        // 3. üéØ "–ù–∞—á–∏–Ω–∞—é—â–∏–π" ‚Äì –Ω–∞–±—Ä–∞—Ç—å 100 –æ—á–∫–æ–≤.
        if (currentScore >= 100 && !isAchieved[3])
            UnlockAchievement(3);
        // 4. üíØ "–û–ø—ã—Ç–Ω—ã–π" ‚Äì –Ω–∞–±—Ä–∞—Ç—å 500 –æ—á–∫–æ–≤.
        if (currentScore >= 500 && !isAchieved[4])
            UnlockAchievement(4);
        // 5. ü•á "–ú–∞—Å—Ç–µ—Ä" ‚Äì –Ω–∞–±—Ä–∞—Ç—å 1000 –æ—á–∫–æ–≤.
        if (currentScore >= 1000 && !isAchieved[5])
            UnlockAchievement(5);
        // 6. üëë "–õ–µ–≥–µ–Ω–¥–∞" ‚Äì –Ω–∞–±—Ä–∞—Ç—å 5000 –æ—á–∫–æ–≤.
        if (currentScore >= 5000 && !isAchieved[6])
            UnlockAchievement(6);

        // --- –°–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ---
        // 7. üçñ "–ö–æ—Å—Ç–æ—á–∫–∞ –¥–ª—è –ü–µ—Ä—Å–∞" ‚Äì —Å–æ–±—Ä–∞—Ç—å 10 –∫–æ—Å—Ç–µ–π.
        if (currentBones >= 10 && !isAchieved[7])
            UnlockAchievement(7);
        // 8. ‚ú® "–ó–æ–ª–æ—Ç–∞—è —É–¥–∞—á–∞" ‚Äì —Å–æ–±—Ä–∞—Ç—å 5 –∑–æ–ª–æ—Ç—ã—Ö –∫–æ—Å—Ç–µ–π.
        if (currentGoldenBones >= 5 && !isAchieved[8])
            UnlockAchievement(8);
        // 9. üí© "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ!" ‚Äì –Ω–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ 5 –∫–∞–∫–∞—à–µ–∫.
        if (currentPoops >= 5 && !isAchieved[9])
            UnlockAchievement(9);
        // 10. üöΩ "–ù–µ–≤–µ–∑–µ–Ω–∏–µ" ‚Äì –Ω–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ 10 –∫–∞–∫–∞—à–µ–∫.
        if (currentPoops >= 10 && !isAchieved[10])
            UnlockAchievement(10);
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ (–∏–Ω–¥–µ–∫—Å—ã 11‚Äì21).
    /// </summary>
    private void CheckOverallAchievements()
    {
        // --- –î–∏—Å—Ç–∞–Ω—Ü–∏—è ---
        // 11. üåé "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å" ‚Äì –ø—Ä–æ–±–µ–∂–∞—Ç—å 10 000 –º.
        if (totalDistance >= 10000 && !isAchieved[11])
            UnlockAchievement(11);
        // 12. üö¥ "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫" ‚Äì –ø—Ä–æ–±–µ–∂–∞—Ç—å 50 000 –º.
        if (totalDistance >= 50000 && !isAchieved[12])
            UnlockAchievement(12);
        // 13. üöÑ "–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –≥–æ–Ω—â–∏–∫" ‚Äì –ø—Ä–æ–±–µ–∂–∞—Ç—å 100 000 –º.
        if (totalDistance >= 100000 && !isAchieved[13])
            UnlockAchievement(13);

        // --- –°—á—ë—Ç ---
        // 14. üìä "–°—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫" ‚Äì –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å 10 000 –æ—á–∫–æ–≤ —Å—É–º–º–∞—Ä–Ω–æ.
        if (totalScore >= 10000 && !isAchieved[14])
            UnlockAchievement(14);
        // 15. üèÜ "–§–∞–Ω–∞—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤" ‚Äì –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å 50 000 –æ—á–∫–æ–≤ —Å—É–º–º–∞—Ä–Ω–æ.
        if (totalScore >= 50000 && !isAchieved[15])
            UnlockAchievement(15);
        // 16. üèÖ "–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä" ‚Äì –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å 100 000 –æ—á–∫–æ–≤ —Å—É–º–º–∞—Ä–Ω–æ.
        if (totalScore >= 100000 && !isAchieved[16])
            UnlockAchievement(16);

        // --- –°–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ---
        // 17. ü¶¥ "–õ—é–±–∏—Ç–µ–ª—å –∫–æ—Å—Ç–µ–π" ‚Äì —Å–æ–±—Ä–∞—Ç—å 100 –∫–æ—Å—Ç–µ–π.
        if (totalBones >= 100 && !isAchieved[17])
            UnlockAchievement(17);
        // 18. üèÜ "–°–æ–±–∏—Ä–∞—Ç–µ–ª—å –∫–æ—Å—Ç–µ–π" ‚Äì —Å–æ–±—Ä–∞—Ç—å 1000 –∫–æ—Å—Ç–µ–π.
        if (totalBones >= 1000 && !isAchieved[18])
            UnlockAchievement(18);
        // 19. üíé "–ó–æ–ª–æ—Ç–∞—è –ª–∞–ø–∫–∞" ‚Äì —Å–æ–±—Ä–∞—Ç—å 50 –∑–æ–ª–æ—Ç—ã—Ö –∫–æ—Å—Ç–µ–π.
        if (totalGoldenBones >= 50 && !isAchieved[19])
            UnlockAchievement(19);
        // 20. üí© "–ù–µ—É–∫–ª—é–∂–∏–π" ‚Äì –Ω–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ 50 –∫–∞–∫–∞—à–µ–∫.
        if (totalPoops >= 50 && !isAchieved[20])
            UnlockAchievement(20);
        // 21. ü§¢ "–ì—Ä—è–∑–Ω—É–ª—è" ‚Äì –Ω–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ 100 –∫–∞–∫–∞—à–µ–∫.
        if (totalPoops >= 100 && !isAchieved[21])
            UnlockAchievement(21);
    }

    /// <summary>
    /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –µ–≥–æ –∏–Ω–¥–µ–∫—Å—É.
    /// –ü–æ–º–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –æ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á—ë—Ç—á–∏–∫, –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    /// –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ AudioManager.
    /// </summary>
    /// <param name="index">–ò–Ω–¥–µ–∫—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–æ—Ç 0 –¥–æ 21)</param>
    private void UnlockAchievement(int index)
    {
        isAchieved[index] = true;
        isAchievedValue[index] = 1;
        achievCount++;
        percentualProgress += progressIncrement;

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ AudioManager
        if (AudioManager.Instance != null && achievementSound != null)
        {
            AudioManager.Instance.PlaySFXSound(achievementSound, achievementSoundVolume);
        }
    }

    #endregion

    #region –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI

    /// <summary>
    /// –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç UI‚Äë–º–∞—Ä–∫–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—á—ë—Ç—á–∏–∫–∞.
    /// </summary>
    private void UpdateMarkers()
    {
        for (int i = 0; i < markers.Count && i < isAchieved.Count; i++)
        {
            if (isAchieved[i])
            {
                markers[i].SetActive(true);
            }
        }
        if (achievCount > totalAchievements)
            achievCount = totalAchievements;
        if (counterText != null)
            counterText.text = "( " + achievCount + " / " + totalAchievements + " )";
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    /// </summary>
    private void UpdateProgressUI()
    {
        if (percentualProgress > 100f)
            percentualProgress = 100f;
        if (percentualProgressText != null)
            percentualProgressText.text = percentualProgress.ToString("F1") + "% COMPLETE";
    }

    #endregion

    #region –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ PlayerPrefs

    public bool IntToBool(int a)
    {
        return a != 0;
    }

    public int BoolToInt(bool b)
    {
        return b ? 1 : 0;
    }

    private void LoadPlayerPrefs()
    {
        achievCount = PlayerPrefs.GetInt("achievCount", 0);
        percentualProgress = PlayerPrefs.GetFloat("PercentualProgress", 0f);

        for (int i = 0; i < totalAchievements; i++)
        {
            int value = PlayerPrefs.GetInt("IsAchieved" + i, 0);
            if (i < isAchieved.Count)
                isAchieved[i] = IntToBool(value);
            else
                isAchieved.Add(IntToBool(value));

            if (i < isAchievedValue.Count)
                isAchievedValue[i] = value;
            else
                isAchievedValue.Add(value);
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–∑ GameManager)
        currentDistance = PlayerPrefs.GetInt("CurrentDistance", 0);
        currentScore = PlayerPrefs.GetInt("CurrentScore", 0);
        currentBones = PlayerPrefs.GetInt("CurrentBones", 0);
        currentGoldenBones = PlayerPrefs.GetInt("CurrentGoldenBones", 0);
        currentPoops = PlayerPrefs.GetInt("CurrentPoops", 0);

        totalDistance = PlayerPrefs.GetInt("TotalDistance", 0);
        totalScore = PlayerPrefs.GetInt("TotalScore", 0);
        totalBones = PlayerPrefs.GetInt("TotalBones", 0);
        totalGoldenBones = PlayerPrefs.GetInt("TotalGoldenBones", 0);
        totalPoops = PlayerPrefs.GetInt("TotalPoops", 0);
    }

    private void SavePlayerPrefs()
    {
        PlayerPrefs.SetInt("achievCount", achievCount);
        PlayerPrefs.SetFloat("PercentualProgress", percentualProgress);

        for (int i = 0; i < totalAchievements; i++)
        {
            PlayerPrefs.SetInt("IsAchieved" + i, isAchievedValue[i]);
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        PlayerPrefs.SetInt("CurrentDistance", currentDistance);
        PlayerPrefs.SetInt("CurrentScore", currentScore);
        PlayerPrefs.SetInt("CurrentBones", currentBones);
        PlayerPrefs.SetInt("CurrentGoldenBones", currentGoldenBones);
        PlayerPrefs.SetInt("CurrentPoops", currentPoops);

        PlayerPrefs.SetInt("TotalDistance", totalDistance);
        PlayerPrefs.SetInt("TotalScore", totalScore);
        PlayerPrefs.SetInt("TotalBones", totalBones);
        PlayerPrefs.SetInt("TotalGoldenBones", totalGoldenBones);
        PlayerPrefs.SetInt("TotalPoops", totalPoops);
    }

    #endregion
}
